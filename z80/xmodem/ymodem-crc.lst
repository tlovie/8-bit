Sections:
00: "seg800" (800-9D2)


Source: "ymodem-crc.z80"
                        	     1: ; based on 6502 version http://www.6502.org/source/io/xmodem/xmodem-receive.txt
                        	     2: ; re-coded by Tom Lovie 2023-03-23
                        	     3: 
                        	     4: monitor_warm_start:	equ	000ch
                        	     5: decimal_string_to_word: equ	015ah	; HL = Addr of string, DE = addr of end, uses BC
                        	     6: 
                        	     7: SOH	equ 01h		; start block
                        	     8: EOT	equ 04h		; end of text marker
                        	     9: ACK	equ 06h		; good block acknowledged
                        	    10: NAK	equ 15h		; bad block acknowledged
                        	    11: CAN	equ 18h		; cancel (not standard, not supported)
                        	    12: CR	equ 0dh		; carriage return
                        	    13: LF	equ 0ah		; line feed
                        	    14: ESC	equ 1bh		; ESC to exit
                        	    15: 
                        	    16: crclo:	equ 0a00h	; memory to store the low byte crc table
                        	    17: crclop: equ 0ah		; page of that memory
                        	    18: crchi: 	equ 0b00h	; memory to store the high byte crc table
                        	    19: crchip: equ 0bh		; page of that memory
                        	    20: sbuff:	equ 1000h	; storage buffer to place received data
                        	    21: 
                        	    22: ;rbuff:	equ crc+02h	; we are using the blank space after the CRC to store the block
                        	    23: rbuff:	equ 0c00h	; fresh page
                        	    24: rbuffp: equ (rbuff) >> 8	; receive buffer is NOT allowed to cross page boundary
                        	    25: rbuffl: equ (rbuff + 02h) & 00ffh	; data portion only - it actually starts two bytes 
                        	    26: rbuffe: equ (rbuff + 82h) & 00ffh	; back for the block number and compliment
                        	    27: 
                        	    28: 	org 0800h
                        	    29: 
00:0800 CD0608          	    30: 		call YModem
00:0803 C30C00          	    31: 		jp monitor_warm_start
                        	    32: 
00:0806 CD6309          	    33: YModem:		call MakeCRCTable
00:0809 21B409          	    34: 		ld hl,msg
00:080C CD4709          	    35: 		call write_string
00:080F 210010          	    36: 		ld hl,sbuff	
00:0812 22CE09          	    37: 		ld (ptr),hl	; initialize the storage pointer
00:0815 AF              	    38: 		xor a		; zero a
00:0816 32CA09          	    39: 		ld (fstblk),a	; enable 0 block processing
00:0819 32C909          	    40: 		ld (blkno),a	; start at block number 0
00:081C 3E43            	    41: StartX:		ld a,"C"	; Start in CRC mode - no fallback
00:081E CD5709          	    42: 		call put_chr	; send it
00:0821 AF              	    43: 		xor a		; zero a register	
00:0822 CD1109          	    44: 		call GetByte	; try to get a byte
00:0825 3808            	    45: 		jr c,GotByte
00:0827 30F3            	    46: 		jr nc,StartX	; if not try again
00:0829 AF              	    47: StartBlk: 	xor a		; zero a register
00:082A CD1109          	    48: 		call GetByte	; try to get byte - delay in a register
00:082D 30FA            	    49: 		jr nc,StartBlk  ; and keep trying to get a character
00:082F FE1B            	    50: GotByte:	cp ESC		; want to quit
00:0831 C8              	    51: 		ret z		
00:0832 FE01            	    52: 		cp SOH		; start of block?
00:0834 2828            	    53: 		jr z,BegBlk
00:0836 FE04            	    54: 		cp EOT		; end of text
00:0838 2802            	    55: 		jr z,ProcEOT	; process EOT
00:083A 1862            	    56: 		jr FlushNAK	; nothing we recognized so flush and send a NAK
00:083C 3ACB09          	    57: ProcEOT:	ld a,(fsteot)  	; check if this is first EOT char
00:083F EE01            	    58: 		xor 01h		; toggle it
00:0841 32CB09          	    59: 		ld (fsteot),a	; write it back to mem
00:0844 285B            	    60: 		jr z,SendNAK	; first one send NAK
00:0846 AF              	    61: 		xor a		; zero a
00:0847 32CA09          	    62: 		ld (fstblk),a	; enable 0 block processing
00:084A 32C909          	    63: 		ld (blkno),a	; reset the block counter
00:084D 3E06            	    64: 		ld a,ACK	; second one send ACK
00:084F CD5709          	    65: 		call put_chr	; 
00:0852 18C8            	    66: 		jr StartX	; after ACK we need to start a new transfer.
00:0854 219D09          	    67: ErrorOut:       ld hl,err       ; print error message and exit if block number is unexpected
00:0857 CD4709          	    68:                 call write_string
00:085A CD2009          	    69:                 call Flush      ; discard remaining buffer
00:085D C9              	    70:                 ret             ; return after fatal error
00:085E 21000C          	    71: BegBlk:		ld hl,rbuff	; start hl at the receive buffer
00:0861 AF              	    72: GetBlk:		xor a		; 3 second window to receive char in a register
00:0862 CD1109          	    73: GetBlk1:	call GetByte	; get next char
00:0865 3037            	    74: 		jr nc,FlushNAK	; sending NAK
00:0867 77              	    75: GetBlk2:	ld (hl),a	; store the character in buffer pointed to by (hl)
00:0868 2C              	    76: 		inc l		; increment the buffer
00:0869 3E84            	    77: 		ld a,rbuffe+2	; <01><FE><128 bytes><CRCHI><CRCLO>
00:086B BD              	    78: 		cp l
00:086C 20F3            	    79: 		jr nz,GetBlk	; get 132 characters (0x84)
00:086E 2E00            	    80: 		ld l,rbuffl-2	; start at beginning of buffer again (now filled with a block)
00:0870 3AC909          	    81: 		ld a,(blkno)	; actual block number
00:0873 BE              	    82: 		cp (hl)		; sent block number
00:0874 20DE            	    83: 		jr nz,ErrorOut	; error out if block number is unexpected
00:0876 EEFF            	    84: 		xor 0ffh	; compliment the actual block number
00:0878 2C              	    85: 		inc l 		
00:0879 BE              	    86: 		cp (hl)		; compare to second byte
00:087A 20D8            	    87: 		jr nz,ErrorOut	; error out if block compliment is unexpected 
00:087C AF              	    88: 		xor a		; zero a
00:087D 32D009          	    89: 		ld (crc),a	; initialize crc value
00:0880 32D109          	    90: 		ld (crc+1),a
00:0883 160C            	    91: 		ld d,rbuffp	; point de at the receive buffer
00:0885 1E02            	    92: 		ld e,rbuffl	; second character (start of data)
00:0887 1A              	    93: CalcCrc:	ld a,(de)	; get the byte into a
00:0888 CD2809          	    94: 		call UpdCRC	; could inline this for speed
00:088B 1C              	    95: 		inc e		;
00:088C 3E82            	    96: 		ld a, rbuffe
00:088E BB              	    97: 		cp e
00:088F 20F6            	    98: 		jr nz,CalcCrc	; go for 128 bytes (130 - 2)
00:0891 ED4BD009        	    99: 		ld bc,(crc)	; b=(crc+1), c=(crc)	calculated CRC
00:0895 1A              	   100: 		ld a,(de)	; high byte of CRC sent
00:0896 B8              	   101: 		cp b		; compare high byte of calculated CRC
00:0897 2005            	   102: 		jr nz,FlushNAK
00:0899 1C              	   103: 		inc e		; increment receive buffer pointer
00:089A 1A              	   104: 		ld a,(de)	; low byte of CRC sent
00:089B B9              	   105: 		cp c		; compare low byte of calculated CRC
00:089C 280A            	   106: 		jr z,GoodBLK	; copy the receive buffer, send ACK
00:089E CD2009          	   107: FlushNAK:	call Flush	; flush serial buffer
00:08A1 3E15            	   108: SendNAK:	ld a,NAK	; and send
00:08A3 CD5709          	   109: 		call put_chr	; a NAK
00:08A6 1881            	   110: 		jr StartBlk	; restart the block
00:08A8 3AC909          	   111: GoodBLK:	ld a,(blkno)	; load the block number
00:08AB 3C              	   112: 		inc a		; increment block number
00:08AC 32C909          	   113: 		ld (blkno),a	; store the block number back
00:08AF 3ACA09          	   114: 		ld a,(fstblk)	; check if we are the on the first block
00:08B2 A7              	   115: 		and a		; and to set flags
00:08B3 2026            	   116: 		jr nz,GoodBLK_NZ	; not zero block - special treatment req'd
00:08B5 3C              	   117: 		inc a		; zero a
00:08B6 32CA09          	   118: 		ld (fstblk),a	; write back the flag for first block
00:08B9 1E02            	   119: 		ld e,rbuffl	; de is pointing at the first char of the block
00:08BB 1A              	   120: 		ld a,(de)	; load the first char
00:08BC B7              	   121: 		or a		; set the flags
00:08BD 2843            	   122: 		jr z,Done	; zero in first char filename indicates done
                        	   123: 	; need to process out the decimal file length from this block
00:08BF 13              	   124: Len_begin:	inc de		; increment the block pointer
00:08C0 1A              	   125: 		ld a,(de)	; look at value
00:08C1 B7              	   126: 		or a		; set flags
00:08C2 20FB            	   127: 		jr nz,Len_begin	; go until we find a zero
00:08C4 13              	   128: 		inc de		; one after the zero
00:08C5 62              	   129: 		ld h,d		; is the first character of the length
00:08C6 6B              	   130: 		ld l,e		; point hl here
00:08C7 13              	   131: Len_end:	inc de		; increment the block pointer
00:08C8 1A              	   132: 		ld a,(de)	; put the byte in a
00:08C9 FE20            	   133: 		cp " "		; compare it to a space
00:08CB 20FA            	   134: 		jr nz,Len_end
00:08CD CD5A01          	   135: 		call decimal_string_to_word
00:08D0 22CC09          	   136: 		ld (trxlen),hl	; the word in hl 		
00:08D3 3E06            	   137: 		ld a,ACK	; send ACK
00:08D5 CD5709          	   138: 		call put_chr 
00:08D8 C31C08          	   139: 		jp StartX	; because we send the start char again now
00:08DB 2ACC09          	   140: GoodBLK_NZ:	ld hl,(trxlen)	; number of bytes to transfer
00:08DE 0E80            	   141: 		ld c,80h	; 128 bytes
00:08E0 0600            	   142: 		ld b,00h	;
00:08E2 ED42            	   143: 		sbc hl,bc	;
00:08E4 3004            	   144: 		jr nc,Do128	; if not negative then do 128 bytes
00:08E6 ED4BCC09        	   145: 		ld bc,(trxlen)	; if negative then we will do the remaining bytes
00:08EA 22CC09          	   146: Do128:		ld (trxlen),hl	; store back the remaining bytes
00:08ED 2E02            	   147: 		ld l,rbuffl	; start at the front of the block  d is pointing at the page of the received data
00:08EF 62              	   148: 		ld h,d		; hl is now pointing at the start of the data
00:08F0 ED5BCE09        	   149: 		ld de,(ptr)	; de is now pointing at the storage buffer position
00:08F4 EDB0            	   150: 		ldir		; copy the block
00:08F6 ED53CE09        	   151: 		ld (ptr),de	; store the current position of the storage buffer
00:08FA 3E06            	   152: SendACK:	ld a,ACK	; send ACK
00:08FC CD5709          	   153: 		call put_chr
00:08FF C32908          	   154: 		jp StartBlk	; get next block
00:0902 3E06            	   155: Done:		ld a,ACK
00:0904 CD5709          	   156: 		call put_chr
00:0907 CD2009          	   157: 		call Flush
00:090A 21A909          	   158: 		ld hl,good	; load success message
00:090D CD4709          	   159: 		call write_string
00:0910 C9              	   160: 		ret
                        	   161: 
                        	   162: 
                        	   163: ; subroutine to wait a set amount of time to get a byte
                        	   164: ; Byte will be in A, destroys BC (delay loop), A initially has the delay counter
00:0911 47              	   165: GetByte:	ld b,a			; high retry counter
00:0912 0E00            	   166: 		ld c,00h		; store 0 in c (retry counter)
                        	   167: GetByteLoop:
00:0914 CD3D09          	   168: 		call get_chr
00:0917 D8              	   169: 		ret c			; return if got chr (carry set)
00:0918 0D              	   170: 		dec c
00:0919 20F9            	   171: 		jr nz,GetByteLoop
00:091B 05              	   172: 		dec b
00:091C 20F6            	   173: 		jr nz,GetByteLoop	; delay loop
00:091E B7              	   174: 		or a			; clear carry flag
00:091F C9              	   175: 		ret
                        	   176: 
                        	   177: ; subroutine to flush the receive buffer
                        	   178: ; destroys A
00:0920 3E80            	   179: Flush:		ld a,80h 	; uses fixed delay for flush
00:0922 CD1109          	   180: 		call GetByte
00:0925 38F9            	   181: 		jr c,Flush
00:0927 C9              	   182: 		ret		
                        	   183: 
                        	   184: 
                        	   185: ;Subroutine to update the crc in memory with one byte in A
                        	   186: ;Updates the CRC in memory (crc), destroys BC, A, HL
                        	   187: ;DE is used for the pointer to the block on the calling end of this loop
                        	   188: ; 6502 version
                        	   189: ;UpdCrc			eor 	crc+1 		; xor A with high byte of CRC
                        	   190: ;       		tax		 	; store result somewhere
                        	   191: ;       		lda 	crc		; get low byte of CRC
                        	   192: ;       		eor 	CRCHI,X		; xor with crchi table lookup from saved result (x)
                        	   193: ;       		sta 	crc+1		; store this into the high byte of the running CRC
                        	   194: ;	      	 	lda 	CRCLO,X		; load A with crclo table lookup from saved result (x)
                        	   195: ;       		sta 	crc		; store that into the low byte of the CRC
                        	   196: ;       		rts			
                        	   197: 				; a has the byte value that we want to add in to the CRC
00:0928 ED4BD009        	   198: UpdCRC:ld bc,(crc)		; c = (crc), b = (crc+1)
00:092C A8              	   199: 	xor b			; xor a with high byte of CRC
00:092D 6F              	   200: 	ld l,a			; store that as the low byte of hl
00:092E 260B            	   201: 	ld h,crchip		; hl is now the high table byte with offest of first xor operation
00:0930 79              	   202: 	ld a,c			; load a with low byte of running CRC
00:0931 46              	   203: 	ld b,(hl)		; fetch the high table byte from memory into b
00:0932 A8              	   204: 	xor b			; xor high table byte with low byte of running CRC
00:0933 32D109          	   205: 	ld (crc+1),a		; store that result in the high byte of running CRC
00:0936 260A            	   206: 	ld h,crclop		; load h with low table CRC page, (hl) is now low table value
00:0938 7E              	   207: 	ld a,(hl)		; fetch that byte into accumulator
00:0939 32D009          	   208: 	ld (crc),a		; store it into running CRC low byte
00:093C C9              	   209: 	ret
                        	   210: 
                        	   211: ;Get one byte from the serial port if available.
                        	   212: ;Returns with byte in A reg with carry flag set, if carry flag clear means no character available
00:093D B7              	   213: get_chr:	or	a			;clear carry flag
00:093E DB03            	   214: 		in      a,(3)                   ;get status
00:0940 E602            	   215:                 and     002h                    ;check RxRDY bit
00:0942 C8              	   216:                 ret	z			;not ready, quit
00:0943 DB02            	   217:                 in      a,(2)                   ;get char
00:0945 37              	   218: 		scf				;set carry flag to show we got a char
00:0946 C9              	   219: 		ret
                        	   220: 
                        	   221: ;
                        	   222: ;Subroutine to write a zero-terminated string to serial output
                        	   223: ;Pass address of string in HL register
                        	   224: ;No error checking
00:0947 DB03            	   225: write_string:           in      a,(3)                   ;read status
00:0949 E601            	   226:                         and     001h                    ;check TxRDY bit
00:094B CA4709          	   227:                         jp      z,write_string          ;loop if not set
00:094E 7E              	   228:                         ld      a,(hl)                  ;get char from string
00:094F A7              	   229:                         and     a                       ;check if 0
00:0950 C8              	   230:                         ret     z                       ;yes, finished
00:0951 D302            	   231:                         out     (2),a                   ;no, write char to output
00:0953 23              	   232:                         inc     hl                      ;next char in string
00:0954 C34709          	   233:                         jp      write_string            ;start over
                        	   234: 
                        	   235: ;
                        	   236: ;Puts a single char (byte value) on serial output
                        	   237: ;Call with char to send in A register. Uses B register
00:0957 47              	   238: put_chr:	ld      b,a                     ;store char
00:0958 DB03            	   239: put_chr1:	in      a,(3)                   ;check if OK to send
00:095A E601            	   240:                 and     001h                    ;check TxRDY bit
00:095C CA5809          	   241:                 jp      z,put_chr1       ;loop if not set
00:095F 78              	   242:                 ld      a,b                     ;get char back
00:0960 D302            	   243:                 out     (2),a                   ;send to output
00:0962 C9              	   244:                 ret                             ;returns with char in a
                        	   245: 
                        	   246: ; subroutine to make the CRC table for fast CRC calculation
                        	   247: ; destroys a, bc, de, hl, ix
                        	   248: ; so we make this table ahead of time, since we have to shift through every bit
                        	   249: ; and this will streamline the calculations for every block that we transfer
                        	   250: MakeCRCTable:
00:0963 AF              	   251:         xor a 	                ; zero a
00:0964 21000A          	   252:         ld hl,crclo             ; hl is pointer to crclo mem area
00:0967 54              	   253:         ld d,h                  ; point de at the same place as hl
00:0968 5D              	   254:         ld e,l                  ;        
00:0969 1C              	   255:         inc e                   ; de pointing one greater that hl
00:096A 0601            	   256:         ld b,01h                ; 
00:096C 0EFF            	   257:         ld c,0ffh               ; going for 511 bytes
00:096E 77              	   258:         ld (hl),a		; store the 0 in the first byte
00:096F EDB0            	   259:         ldir			; zero out all the rest
00:0971 21000B          	   260:         ld hl,crchi             ; use hl for pointer to crchi (hl,ix,iy are the only registers that... 
00:0974 DD21000A        	   261:         ld ix,crclo             ; use ix for pointer to crclo  ... can do in memory rotate and shifts)
00:0978 57              	   262:         ld d,a    	        ; a still has a zero in it          
00:0979 7A              	   263: CRCT1:  ld a,d			; d register is main loop counter
00:097A 4E              	   264: 	ld c,(hl)               ; want to xor the value in the high table with a
00:097B A9              	   265:         xor c			;
00:097C 77              	   266:         ld (hl),a               ; and store it back to the high table 
00:097D 1E08            	   267:         ld e,08h                ; e register is inner loop counter
00:097F DDCB0026        	   268: CRCT2: sla (ix+0)		; shift the low byte table to the left
00:0983 CB16            	   269:         rl (hl)                 ; rotate because we are doing a 16 bit shift
00:0985 300C            	   270:         jr nc,CRCT3		; if the carry is not set (no bit shifted out) - do nothing 
00:0987 7E              	   271:         ld a,(hl)               ; carry is set so we need to xor with the polynomial 0x1021
00:0988 EE10            	   272:         xor 10h                 ; load the high bit, xor it with high polynomial
00:098A 77              	   273:         ld (hl),a               ; and store it back
00:098B DD7E00          	   274:         ld a,(ix+0)             ; load the low bit,
00:098E EE21            	   275:         xor 21h                 ; xor it with the low polynomial
00:0990 DD7700          	   276:         ld (ix+0),a             ; store it back
00:0993 1D              	   277: CRCT3:	dec e                   ;
00:0994 20E9            	   278:         jr nz,CRCT2		; continue on for all 8 bits
00:0996 DD23            	   279:         inc ix			; increment the pointers
00:0998 23              	   280:         inc hl
00:0999 14              	   281:         inc d                   ; and increment counter and loop
00:099A 20DD            	   282:         jr nz,CRCT1             ; until we get to 256 (0)
00:099C C9              	   283: 	ret
                        	   284: 
00:099D 0A              	   285: err:	dfb LF,CR,"Up Err!",CR,LF,0
00:099E 0D
00:099F 55702045727221
00:09A6 0D
00:09A7 0A
00:09A8 00
00:09A9 0A              	   286: good:	dfb LF,CR,"Up Ok!",CR,LF,0
00:09AA 0D
00:09AB 5570204F6B21
00:09B1 0D
00:09B2 0A
00:09B3 00
00:09B4 0A              	   287: msg:	dfb LF,CR,"Y/CRC <Esc> to q",CR,LF,0
00:09B5 0D
00:09B6 592F435243203C45
00:09BE 73633E20746F2071
00:09C6 0D
00:09C7 0A
00:09C8 00
                        	   288: 
00:09C9 00              	   289: blkno:	dfb 0		; block number of the transfer
00:09CA 01              	   290: fstblk:	dfb 1		; indicates first block
00:09CB 01              	   291: fsteot: dfb 1		; indicates first eot char
00:09CC 0000            	   292: trxlen: dfw 0		; file length
00:09CE 0000            	   293: ptr:	dfw 0		; pointer to storage block
00:09D0 0000            	   294: crc:	dfw 0		; running crc calculation
                        	   295: 
                        	   296: 	; the receive buffer lands here
                        	   297: 


Symbols by name:
ACK                              E:0006
BegBlk                           A:085E
CR                               E:000D
CRCT1                            A:0979
CRCT2                            A:097F
CRCT3                            A:0993
CalcCrc                          A:0887
Do128                            A:08EA
Done                             A:0902
EOT                              E:0004
ESC                              E:001B
ErrorOut                         A:0854
Flush                            A:0920
FlushNAK                         A:089E
GetBlk                           A:0861
GetBlk1                          A:0862
GetBlk2                          A:0867
GetByte                          A:0911
GetByteLoop                      A:0914
GoodBLK                          A:08A8
GoodBLK_NZ                       A:08DB
GotByte                          A:082F
LF                               E:000A
Len_begin                        A:08BF
Len_end                          A:08C7
MakeCRCTable                     A:0963
NAK                              E:0015
ProcEOT                          A:083C
SOH                              E:0001
SendACK                          A:08FA
SendNAK                          A:08A1
StartBlk                         A:0829
StartX                           A:081C
UpdCRC                           A:0928
YModem                           A:0806
blkno                            A:09C9
crc                              A:09D0
crchi                            E:0B00
crchip                           E:000B
crclo                            E:0A00
crclop                           E:000A
decimal_string_to_word           E:015A
err                              A:099D
fstblk                           A:09CA
fsteot                           A:09CB
get_chr                          A:093D
good                             A:09A9
monitor_warm_start               E:000C
msg                              A:09B4
ptr                              A:09CE
put_chr                          A:0957
put_chr1                         A:0958
rbuff                            E:0C00
rbuffe                           E:0082
rbuffl                           E:0002
rbuffp                           E:000C
sbuff                            E:1000
trxlen                           A:09CC
write_string                     A:0947

Symbols by value:
0001 SOH
0002 rbuffl
0004 EOT
0006 ACK
000A LF
000A crclop
000B crchip
000C monitor_warm_start
000C rbuffp
000D CR
0015 NAK
001B ESC
0082 rbuffe
015A decimal_string_to_word
0806 YModem
081C StartX
0829 StartBlk
082F GotByte
083C ProcEOT
0854 ErrorOut
085E BegBlk
0861 GetBlk
0862 GetBlk1
0867 GetBlk2
0887 CalcCrc
089E FlushNAK
08A1 SendNAK
08A8 GoodBLK
08BF Len_begin
08C7 Len_end
08DB GoodBLK_NZ
08EA Do128
08FA SendACK
0902 Done
0911 GetByte
0914 GetByteLoop
0920 Flush
0928 UpdCRC
093D get_chr
0947 write_string
0957 put_chr
0958 put_chr1
0963 MakeCRCTable
0979 CRCT1
097F CRCT2
0993 CRCT3
099D err
09A9 good
09B4 msg
09C9 blkno
09CA fstblk
09CB fsteot
09CC trxlen
09CE ptr
09D0 crc
0A00 crclo
0B00 crchi
0C00 rbuff
1000 sbuff
