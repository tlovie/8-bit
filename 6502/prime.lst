Sections:
00: "seg800" (800-8E3)


Source: "prime.s"
                        	     1: q		equ 	$00	; main loop variable
                        	     2: d		equ 	$04	; divisor - 2 bytes
                        	     3: dmax		equ	$06
                        	     4: mult1		equ     $08
                        	     5: mult2		equ     $18
                        	     6: dividend	equ	$10
                        	     7: divisor		equ	$14
                        	     8: remainder	equ 	$16
                        	     9: dividend10	equ 	$20
                        	    10: ptr		equ	$24
                        	    11: 
                        	    12: 
                        	    13: 	org $0800
                        	    14: 
                        	    15: main:	
00:0800 A910            	    16: 	lda #$10
00:0802 8525            	    17: 	sta ptr+1		; set the page for storing primes	
00:0804 A900            	    18: 	lda #0
00:0806 8524            	    19: 	sta ptr
00:0808 A8              	    20: 	tay
00:0809 8501            	    21: 	sta q+1
00:080B A905            	    22: 	lda #5
00:080D 8500            	    23: 	sta q		; start q loop at 5
00:080F A903            	    24: 	lda #3
00:0811 8506            	    25: 	sta dmax
                        	    26: q_loop:			; q is 16 bits here
00:0813 A903            	    27: 	lda #3
00:0815 8504            	    28: 	sta d		; init d loop
00:0817 A506            	    29: 	lda dmax	; figure out if dmax * dmax > q
00:0819 8508            	    30: 	sta mult1
00:081B 8518            	    31: 	sta mult2
00:081D 20D008          	    32: 	jsr mul16
00:0820 8518            	    33: 	sta mult2	; store a here 
00:0822 8608            	    34: 	stx mult1	; store x here		
00:0824 18              	    35:         clc
00:0825 A508            	    36: 	lda mult1	; compute dmax*dmax - q
00:0827 E500            	    37: 	sbc q
00:0829 A508            	    38: 	lda mult1
00:082B E501            	    39: 	sbc q+1		; need dmax*dmax - q >= 0
00:082D B002            	    40: 	bcs d_loop
00:082F E606            	    41: 	inc dmax
                        	    42: d_loop:	
00:0831 A500            	    43: 	lda q
00:0833 8510            	    44: 	sta dividend
00:0835 A501            	    45: 	lda q+1
00:0837 8511            	    46: 	sta dividend+1
00:0839 A504            	    47: 	lda d
00:083B 8514            	    48: 	sta divisor
00:083D 206C08          	    49: 	jsr div16	; divide q by d, remainder in a
00:0840 C900            	    50: 	cmp #0
00:0842 F01E            	    51: 	beq composite
00:0844 18              	    52: 	clc
00:0845 A902            	    53: 	lda #02
00:0847 6504            	    54: 	adc d
00:0849 B009            	    55: 	bcs prime	; if we are going to overflow d means we are done
00:084B 8504            	    56: 	sta d
00:084D 18              	    57: 	clc
00:084E A506            	    58: 	lda dmax
00:0850 E504            	    59: 	sbc d
00:0852 90DD            	    60: 	bcc d_loop
                        	    61: prime:
00:0854 A500            	    62: 	lda q
00:0856 9124            	    63: 	sta (ptr),y
00:0858 C8              	    64: 	iny
00:0859 A501            	    65: 	lda q+1
00:085B 9124            	    66: 	sta (ptr),y
00:085D C8              	    67: 	iny
00:085E D002            	    68: 	bne composite
00:0860 E625            	    69: 	inc ptr+1	; move to next page if y=0
                        	    70: composite:	; we had a remainder of zero, therefore the number is composite
00:0862 A902            	    71: 	lda #2	; increment q
00:0864 18              	    72: 	clc
00:0865 6500            	    73: 	adc q
00:0867 8500            	    74: 	sta q
                        	    75: 	;lda #0
                        	    76: 	;adc q+1
                        	    77: 	;sta q+1
00:0869 90A8            	    78: 	bcc q_loop	; continue on if not overflow 16 bit
                        	    79: 
00:086B 60              	    80: 	rts
                        	    81: 
                        	    82: ; 16 bit divide wit 8 bit quotient - result in dividend
                        	    83: div16:
00:086C A900            	    84: 	lda #0
00:086E 8516            	    85: 	sta remainder
00:0870 A210            	    86: 	ldx #16
                        	    87: div16loop:
00:0872 0610            	    88: 	asl dividend
00:0874 2611            	    89: 	rol dividend+1
00:0876 2616            	    90: 	rol remainder
00:0878 A516            	    91: 	lda remainder
00:087A 38              	    92: 	sec
00:087B E514            	    93: 	sbc divisor
00:087D 9004            	    94: 	bcc div16_skip
00:087F 8516            	    95: 	sta remainder
00:0881 E610            	    96: 	inc dividend
                        	    97: div16_skip:
00:0883 CA              	    98: 	dex
00:0884 D0EC            	    99: 	bne div16loop
00:0886 60              	   100: 	rts
                        	   101: 
                        	   102: ; 32 bit divide with 16 bit quotient
                        	   103: div32:
00:0887 A900            	   104: 	lda #0
00:0889 8516            	   105: 	sta remainder
00:088B 8517            	   106: 	sta remainder+1
00:088D A220            	   107: 	ldx #32
                        	   108: div32loop:
00:088F 0610            	   109: 	asl dividend	; dividend *2, msb -> carry
00:0891 2611            	   110: 	rol dividend+1
00:0893 2612            	   111: 	rol dividend+2
00:0895 2613            	   112: 	rol dividend+3
00:0897 2616            	   113: 	rol remainder	; remainder *2 + msb from carry
00:0899 2617            	   114: 	rol remainder+1
00:089B A516            	   115: 	lda remainder
00:089D 38              	   116: 	sec
00:089E E514            	   117: 	sbc divisor	; subtract divisor to see if it fits in
00:08A0 A8              	   118: 	tay		; lb -> y, for we may need it later
00:08A1 A517            	   119: 	lda remainder+1
00:08A3 E515            	   120: 	sbc divisor+1	; hb in a
00:08A5 9006            	   121: 	bcc div32_skip
00:08A7 8517            	   122: 	sta remainder+1
00:08A9 8416            	   123: 	sty remainder
00:08AB E610            	   124: 	inc dividend	; result in dividend 2 low bytes
                        	   125: div32_skip:
00:08AD CA              	   126: 	dex
00:08AE D0DF            	   127: 	bne div32loop
00:08B0 60              	   128: 	rts
                        	   129: 
                        	   130: ; 32 bit divide by 10
                        	   131: div32_10:
00:08B1 A900            	   132: 	lda #0
00:08B3 8516            	   133: 	sta remainder
00:08B5 A220            	   134: 	ldx #32
                        	   135: div32_10_loop:
00:08B7 0620            	   136: 	asl dividend10	; dividend *2, msb -> carry
00:08B9 2621            	   137: 	rol dividend10+1
00:08BB 2622            	   138: 	rol dividend10+2
00:08BD 2623            	   139: 	rol dividend10+3
00:08BF 2616            	   140: 	rol remainder	; remainder *2 + msb from carry
00:08C1 A516            	   141: 	lda remainder
00:08C3 38              	   142: 	sec
00:08C4 E90A            	   143: 	sbc #10		; subtract divisor to see if it fits in
00:08C6 9004            	   144: 	bcc div32_10_skip
00:08C8 8516            	   145: 	sta remainder
00:08CA E610            	   146: 	inc dividend	; result in dividend 2 low bytes
                        	   147: div32_10_skip:
00:08CC CA              	   148: 	dex
00:08CD D0E8            	   149: 	bne div32_10_loop
00:08CF 60              	   150: 	rts
                        	   151: 
                        	   152: ; multiplication routine
                        	   153: ; factors in mult1 and mult2
                        	   154: ; result is A * 256 + X (AX)
                        	   155: mul16:
00:08D0 A900            	   156: 	lda #$00
00:08D2 A208            	   157: 	ldx #$08
00:08D4 18              	   158: 	clc
00:08D5 9003            	   159: mul16_1:bcc mul16_2
00:08D7 18              	   160: 	clc
00:08D8 6518            	   161: 	adc mult2
00:08DA 6A              	   162: mul16_2:ror
00:08DB 6608            	   163: 	ror mult1
00:08DD CA              	   164: 	dex
00:08DE 10F5            	   165: 	bpl mul16_1
00:08E0 A608            	   166: 	ldx mult1
00:08E2 60              	   167: 	rts
                        	   168: 


Symbols by name:
composite                        A:0862
d                                E:0004
d_loop                           A:0831
div16                            A:086C
div16_skip                       A:0883
div16loop                        A:0872
div32                            A:0887
div32_10                         A:08B1
div32_10_loop                    A:08B7
div32_10_skip                    A:08CC
div32_skip                       A:08AD
div32loop                        A:088F
dividend                         E:0010
dividend10                       E:0020
divisor                          E:0014
dmax                             E:0006
main                             A:0800
mul16                            A:08D0
mul16_1                          A:08D5
mul16_2                          A:08DA
mult1                            E:0008
mult2                            E:0018
prime                            A:0854
ptr                              E:0024
q                                E:0000
q_loop                           A:0813
remainder                        E:0016

Symbols by value:
0000 q
0004 d
0006 dmax
0008 mult1
0010 dividend
0014 divisor
0016 remainder
0018 mult2
0020 dividend10
0024 ptr
0800 main
0813 q_loop
0831 d_loop
0854 prime
0862 composite
086C div16
0872 div16loop
0883 div16_skip
0887 div32
088F div32loop
08AD div32_skip
08B1 div32_10
08B7 div32_10_loop
08CC div32_10_skip
08D0 mul16
08D5 mul16_1
08DA mul16_2
